@using TastyDelivery.Core.Models.Restaurant

@model IEnumerable<RestaurantMenuViewModel>

@{
    var groupedItems = Model.GroupBy(item => item.Category);
}

<h2 class="text-center">@ViewBag.Title</h2>

<div class="container">
    <div class="row">
        <div class="col-md-6">
            <div class="menu-container">
                @foreach (var categoryGroup in groupedItems)
                {
                    <h3 class="category-heading">@categoryGroup.Key</h3>
                    @foreach (var menuItem in categoryGroup)
                    {
                        <div class="menu-item">
                            <h4>@menuItem.ProductName - @menuItem.Price BGN</h4>
                            <p>@menuItem.Description</p>
                            <div class="input-group mb-3">
                                <input type="number" id="quantity_@menuItem.ProductId" class="form-control" value="1" min="1" max="20" style="width: 6ch">
                                <div class="input-group-append">
                                    <button class="add-to-order-btn"
                                            data-restaurant-id="@menuItem.RestaurantId"
                                            data-product-id="@menuItem.ProductId"
                                            data-price="@menuItem.Price">
                                        Add To Order
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

<style>
    .menu-container {
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 5px;
    }

    .category-heading {
        color: #007bff;
        margin-bottom: 10px; 
    }

    .menu-item {
        margin-bottom: 20px;
    }
</style>

@section Scripts {
    <script>
        var addToOrderButtons = document.querySelectorAll('.add-to-order-btn');
        addToOrderButtons.forEach(function (button) {
            button.addEventListener('click', function () {
                var restaurantId = button.getAttribute('data-restaurant-id');
                var productId = button.getAttribute('data-product-id');
                var price = button.getAttribute('data-price');

                var quantity = document.getElementById('quantity_' + productId).value;

                var xhr = new XMLHttpRequest();
                var url = '@Url.Action("Add", "ShoppingCart")';
                xhr.open('POST', url, true);
                xhr.setRequestHeader('Content-Type', 'application/json');

                xhr.onreadystatechange = function () {
                    if (xhr.readyState === XMLHttpRequest.DONE) {
                        if (xhr.status === 200) {
                            var response = JSON.parse(xhr.responseText);
                            if (response.success) {
                                alert('Item added to cart successfully!');
                            } else {
                                alert('Failed to add item to cart: ' + response.message);
                            }
                        } else {
                            alert('Failed to add item to cart. Status: ' + xhr.status);
                        }
                    }
                };

                var data = JSON.stringify({
                    productId: parseInt(productId),
                    price: parseFloat(price),
                    quantity: parseInt(quantity)
                });

                xhr.send(data);
            });
        });
    </script>
}


